@page "/account"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@implements IAsyncDisposable


<PageTitle>Account Info</PageTitle>

<h3>Account Info</h3>

<hr />

<div class="my-2">
    @if (accountInfo != null)
    {
        <p>Account Holder: @accountInfo.AccountName</p>
        <p>Account Number: @accountInfo.AccountNumber</p>
        <p>Time Taken: @responseTime ms</p>
    }
</div>

@code {

    private AccountInfo? accountInfo;
    private long responseTime;

    private readonly AccountRequest accountRequest = new()
        {
            SenderBic = "BARCKENX",
            RecipientBic = "SCBLKENX",
            RecipientAccountNumber = "2456345646"
        };


    [Inject]
    private IApiClient ApiClient { get; set; } = default!;

    [Inject]
    private IConfiguration Configuration { get; set; } = default!;

    [Inject]
    private ICacheService CacheService { get; set; } = default!;


    private async Task FetchAccountInfo()
    {
        try
        {
            var stopwatch = Stopwatch.StartNew();

            if (accountInfo == null)
            {
                var cacheKey = CacheKeyHelper.GenerateCacheKey(accountRequest.RecipientBic, accountRequest.RecipientAccountNumber);
                var cachedAccountInfo = await CacheService.GetAsync<AccountInfo>(cacheKey);
                if (cachedAccountInfo != null)
                {
                    accountInfo = cachedAccountInfo;
                }
                else
                {
                    var apiEndPoint = Configuration["AppSettings:EndPoints:DHT:FetchAccountInfo"];
                    if (string.IsNullOrEmpty(apiEndPoint))
                    {
                        throw new InvalidOperationException("API endpoint is not configured.");
                    }

                    accountInfo = await ApiClient.FetchAccountData(accountRequest, apiEndPoint);
                    await CacheService.SetAsync(cacheKey, accountInfo, TimeSpan.FromHours(12), TimeSpan.FromMinutes(30));
                }
            }

            stopwatch.Stop();
            responseTime = stopwatch.ElapsedMilliseconds;

            StateHasChanged();
        }
        catch (Exception)
        {
            
            throw;
        }
        
    }

    public async ValueTask DisposeAsync()
    {
        await Task.CompletedTask; 
    }

}

<hr />
<button class="btn btn-primary btn-sm me-3 mb-3" @onclick="FetchAccountInfo">Fetch Account Info</button>
<button class="btn btn-secondary btn-sm mb-3" @onclick="FetchAccountInfo">Refetch Account Info</button>